{"/home/travis/build/npmtest/node-npmtest-aws-cloudfront-sign/test.js":"/* istanbul instrument in package npmtest_aws_cloudfront_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-cloudfront-sign/lib.npmtest_aws_cloudfront_sign.js":"/* istanbul instrument in package npmtest_aws_cloudfront_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aws_cloudfront_sign = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aws_cloudfront_sign = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-cloudfront-sign/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aws-cloudfront-sign && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aws_cloudfront_sign */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aws_cloudfront_sign\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aws_cloudfront_sign.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aws_cloudfront_sign.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aws_cloudfront_sign.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aws_cloudfront_sign.__dirname + '/lib.npmtest_aws_cloudfront_sign.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aws-cloudfront-sign/node_modules/aws-cloudfront-sign/lib/cloudfrontUtil.js":"/**\n * Cloudfront URL signature utility.\n */\n\nvar url = require('url');\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar util = require('util');\nvar _ = require('lodash');\nvar CannedPolicy = require('./CannedPolicy');\n\n/**\n * Build an AWS signed URL.\n *\n * @param {String} CloudFront resource URL\n * @param {Object} Signature parameters\n * @return {String} Signed CloudFront URL\n */\nfunction getSignedUrl(cfUrl, params) {\n  var privateKey = _getPrivateKey(params);\n  var policy = _createPolicy(\n    cfUrl, _getExpireTime(params), _getIpRange(params));\n  var signature = _createPolicySignature(policy, privateKey);\n  var policyStr = new Buffer(policy.toJSON()).toString('base64');\n\n  // Parse the cloudfront URL so we can add the querystring values required by\n  // AWS signed URLs. We need to assign an empty string to the `search`\n  // property so that the object value of `.query` is used when `.format()`\n  // is called.\n  var parsedUrl = url.parse(cfUrl, true);\n  parsedUrl.search = '';\n  _.extend(parsedUrl.query, {\n    'Expires': policy.expireTime,\n    'Policy': normalizeBase64(policyStr),\n    'Signature': normalizeBase64(signature),\n    'Key-Pair-Id': params.keypairId\n  });\n\n  // Return a formatted URL string with signature.\n  return parsedUrl.format();\n}\n\n/**\n * Build an AWS signed RTMP URL assuming your distribution supports this.\n *\n * @param {String} Cloudfront domain\n * @param {String} S3 key\n * @param {Object} Signature parameters\n * @return {Object} Cloudfront server path and stream name with RTMP formatting\n */\nfunction getSignedRTMPUrl(domainname, s3key, params) {\n\n  if (!domainname || domainname.indexOf('/') > -1) {\n    throw new Error(\n      'Supplied domain name doesn\\'t look right. ' +\n      'Example: \\'xxxxxxxx.cloudfront.net\\'. Omit \\'http\\' and any paths.'\n    );\n  }\n\n  if (!s3key || s3key.length === 0 || s3key.charAt(0) === '/') {\n    throw new Error(\n      'Supplied s3 key doesn\\'t look right. ' +\n      'Example: \\'myfolder/bla.mp4\\'. Omit preceding slashes or hostnames.'\n    );\n  }\n\n  return {\n    rtmpServerPath: 'rtmp://' + domainname + '/cfx/st',\n    rtmpStreamName: module.exports.getSignedUrl(s3key, params)\n  };\n}\n\n/**\n * Build list of cookies for the specified resource\n *\n * @param {String} CloudFront resource URL\n * @param {Object} Signature parameters\n * @return {String} List of CloudFront cookies\n */\nfunction getSignedCookies(cfUrl, params){\n  var privateKey = _getPrivateKey(params);\n  var policy = _createPolicy(\n    cfUrl, _getExpireTime(params), _getIpRange(params));\n  var signature = _createPolicySignature(policy, privateKey);\n  var policyStr = new Buffer(policy.toJSON()).toString('base64');\n\n  var cookies = {};\n  cookies['CloudFront-Policy'] = normalizeBase64(policyStr);\n  cookies['CloudFront-Signature'] = normalizeBase64(signature);\n  cookies['CloudFront-Key-Pair-Id'] = params.keypairId;\n\n  return cookies;\n}\n\n/**\n * Create a URL safe Base64 encoded string.\n *\n * This function will replace all characters that are invalid in a URL query\n * string with characters that are. AWS will translate these characters back to\n * their original value before processing.\n *\n * For more information, see\n * http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-canned-policy.html\n *\n * @param {String}: Base64 encoded string\n */\nfunction normalizeBase64(str) {\n  return str\n    .replace(/\\+/g, '-')\n    .replace(/=/g, '_')\n    .replace(/\\//g, '~');\n}\n\n/**\n * Normalize all invalid AWS signature characters.\n *\n * For more information on AWS signatures, see\n * http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-canned-policy.html\n *\n * @deprecated\n * @param {String}: Base64 encoded signature string\n */\nfunction normalizeSignature(sig) {\n  console.log(\n    'Deprecation Warning: \"normalizeSignature\" will soon be removed. Please ' +\n    'use \"normalizeBase64\"');\n  return normalizeBase64(sig);\n}\n\n/**\n * Create an AWS policy.\n *\n * @private\n * @param {string} CloudFront resource URL\n * @param {Number|Moment|Date} URL expiration time\n * @param {string} Source IP range in CIDER notation\n * @returns {Object} AWS policy object\n */\nfunction _createPolicy(cfUrl, expireTime, ipRange) {\n  // If an expiration time isn't set, default to 30 seconds.\n  var defaultExpireTime = Math.round(Date.now() + 30000);\n  expireTime = expireTime || defaultExpireTime;\n\n  return new CannedPolicy(cfUrl, expireTime, ipRange);\n}\n\n/**\n * Create a policy signature.\n *\n * @private\n * @param {Object} AWS policy\n * @param {string} private key string for signature\n * @returns {string} Base64 encoded signature\n */\nfunction _createPolicySignature(policy, privateKey) {\n  var sign = crypto.createSign('RSA-SHA1');\n  sign.update(policy.toJSON());\n\n  return sign.sign(privateKey, 'base64');\n}\n\n/**\n * Return the expire time in milliseconds.\n *\n * This function will return the `expireTime` value in milliseconds. If the\n * value is not a number or a string it will use Object.valueOf\n *\n * @see http://momentjs.com/docs\n *\n * @param {Object} opts - Options object containing the expireTime\n * @return {Number} expireTime - Expire time represented in milliseconds\n */\nfunction _getExpireTime(opts) {\n  return +opts.expireTime || null;\n}\n\n/**\n * Helper function for retrieving the IP range from the params object.\n * @private\n */\nfunction _getIpRange(opts) {\n  return opts.ipRange || null;\n}\n\n/**\n * Helper function for retrieving the private key from the params object.\n * @private\n */\nfunction _getPrivateKey(params) {\n  var privateKeyString = params.privateKeyString;\n  var pem;\n\n  if (params.privateKeyPath) {\n    pem = fs.readFileSync(params.privateKeyPath);\n    privateKeyString = pem.toString('ascii');\n  }\n\n  var newLinePattern = /\\r|\\n/;\n  var lineBreakExists = newLinePattern.test(privateKeyString);\n  if (!lineBreakExists) {\n      throw new Error('Invalid private key string, must include line breaks');\n  }\n\n  return privateKeyString;\n}\n\n\nexports.getSignedCookies = getSignedCookies;\nexports.getSignedUrl = getSignedUrl;\nexports.getSignedRTMPUrl = getSignedRTMPUrl;\nexports.normalizeSignature = normalizeSignature;\nexports.normalizeBase64 = normalizeBase64;\nexports._getExpireTime = _getExpireTime;\nexports._getIpRange = _getIpRange;\n","/home/travis/build/npmtest/node-npmtest-aws-cloudfront-sign/node_modules/aws-cloudfront-sign/lib/CannedPolicy.js":"/**\n * `CannedPolicy` constructor.\n *\n * @param {String} Resource URL\n * @param {Number} Epoch time of URL expiration\n * @param {String} IP Address/range to allow in this request\n */\nfunction CannedPolicy(url, expireTime, ipRange) {\n  this.url = url;\n  this.expireTime = Math.round(expireTime/ 1000) || undefined;\n  this.ipRange = ipRange;\n}\n\n/**\n * Serialize the CannedPolicy instance.\n *\n * @return {String} Serialized policy\n */\nCannedPolicy.prototype.toJSON = function() {\n  // Ensure the current instance is valid before building the canned policy.\n  this._validate();\n\n  var policy = {\n    'Statement': [{\n      'Resource': this.url,\n      'Condition': {\n        'DateLessThan': {\n          'AWS:EpochTime': this.expireTime\n        }\n      }\n    }]\n  };\n\n  if (this.ipRange) {\n    policy.Statement[0].Condition.IpAddress = {\n      'AWS:SourceIp': this.ipRange\n    };\n  }\n\n  return JSON.stringify(policy);\n};\n\n/**\n * Check for common mistakes with types\n * @private\n */\nCannedPolicy.prototype._validate = function() {\n  // Ensure required params are present\n  assert(!!this.url, 'Missing param: url');\n  assert(!!this.expireTime, 'Missing param: expireTime');\n\n  // Ensure expireTime value is valid\n  assert(this.expireTime < 2147483647,\n    'expireTime must be less than January 19, 2038 03:14:08 GMT ' +\n    'due to the limits of UNIX time');\n  assert(this.expireTime > (new Date().getTime() / 1000),\n    'expireTime must be after the current time');\n\n  return true;\n};\n\n\n/**\n * Assert that an expression evaluates to `true`\n */\nfunction assert(assertion, msg) {\n  if (!assertion) {\n    throw new Error(msg);\n  }\n}\n\n\nmodule.exports = CannedPolicy;\n"}